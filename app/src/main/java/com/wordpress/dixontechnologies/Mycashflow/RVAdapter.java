package com.wordpress.dixontechnologies.Mycashflow;import android.app.AlertDialog;import android.app.Dialog;import android.content.Context;import android.content.DialogInterface;import android.content.SharedPreferences;import android.os.Build;import android.os.Handler;import android.preference.PreferenceManager;import android.support.annotation.NonNull;import android.support.design.widget.Snackbar;import android.support.v7.widget.RecyclerView;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.Toast;import com.wordpress.dixontechnologies.Mycashflow.data.DBAdapter;import com.wordpress.dixontechnologies.Mycashflow.listeners.RichListener;import java.util.ArrayList;import java.util.HashMap;import java.util.List;/** * Created by DIXON on 7/12/2016. */public class RVAdapter extends RecyclerView.Adapter<NewCashHolder> implements RichListener {    OnBottomReachedListener onBottomReachedListener;    List<String> itemsPendingRemoval;    private Context c_;   RichListener richListener;   private static ItemRemovedListener itemRemovedListener;    private ArrayList<Entry_Nusu_Ojo> _main_entries;    private DBAdapter db;    private Entry_Nusu_Ojo nusuEntry;    RVAdapter(Context c, ArrayList<Entry_Nusu_Ojo> main_entries) {        this.c_ = c;        this._main_entries = main_entries;        itemsPendingRemoval = new ArrayList<>();        db = new DBAdapter(c);    }    void setOnItemRemovedListener(ItemRemovedListener onItemRemovedListener){        RVAdapter.itemRemovedListener = onItemRemovedListener;//        richListener.updateUi(db);    }    @NonNull    @Override    public NewCashHolder onCreateViewHolder(ViewGroup parent,                                            int viewType) {        View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.testholder, parent, false);        return new NewCashHolder(v);    }    @Override    public void onBindViewHolder(@NonNull final NewCashHolder holder, final int position) {    //    final int pos = holder.getAdapterPosition();        nusuEntry = _main_entries.get(holder.getAdapterPosition());        SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(c_);        String currency_type = sharedPreferences.getString("currency_", "");        String currency = currency_type;        String date = String.valueOf(nusuEntry.getTime_date());        int dd = nusuEntry.getId();        String letter = nusuEntry.getCash().substring(0, 1).toUpperCase();        holder.item_name.setText(nusuEntry.getCash());        holder.amount_.setAmount(Float.parseFloat(nusuEntry.getAmount()), currency);        holder.time.setText(date);        holder.letter_tv.setText(letter);        NusuColorGen colorGenerator = NusuColorGen.MATERIAL;        int color = colorGenerator.getColor(dd);        CircularTextLogo circularTextLogo = new CircularTextLogo.uilder().buildRect("", color);        holder.root_view.setBackground(circularTextLogo);    holder.itemView.setOnClickListener(v -> Snackbar.make(v, "Hold to delete", Snackbar.LENGTH_LONG).show());        holder.itemView.setOnLongClickListener(v -> {            deleteEntries(holder.getAdapterPosition(), v);            return true;        });    }    @Override    public int getItemCount() {        if (_main_entries.size() == 0) {            return _main_entries.size();        } else        return _main_entries.size();    }    public void setOnBottomReachedListeners(OnBottomReachedListener onBottomReachedListener) {        this.onBottomReachedListener = onBottomReachedListener;    }    private void deleteEntries(final int pos, final View view) {      new AlertDialog.Builder(c_)              .setTitle("Delete Item")        .setMessage("Are you sure ?")       .setPositiveButton("Yes", (dialog, which) -> {                   deleteDbData(view, pos);       })       .setNegativeButton("Cancel", (dialog, which) -> dialog.dismiss()).show();        this.notifyItemRemoved(pos);        this.notifyDataSetChanged();    }    private void deleteDbData(View view, final int pos) {        nusuEntry = _main_entries.get(pos);        int id = nusuEntry.getId();        db = new DBAdapter(c_);        db.openDB();        if (db.delete(id)) {            _main_entries.remove(pos);            notifyItemRemoved(pos);            getItemCount();            db.delete(id);            remove(id);            //itemRemovedListener.onItemRemovedListener(pos);            Snackbar.make(view, "Item deleted", Snackbar.LENGTH_LONG).show();        } else {            //   Toast.makeText(c_, "Unable To Delete, consult developer", Toast.LENGTH_SHORT).show();            Snackbar.make(view, "Unable To Delete, consult developer", Snackbar.LENGTH_SHORT).show();        }        db.closeDB();    }    private void remove(int i) {        String data = String.valueOf(_main_entries.get(i));        if (!itemsPendingRemoval.contains(data)) {            itemsPendingRemoval.remove(data);        }        if (_main_entries.contains(data)) {            _main_entries.remove(i);            notifyItemRemoved(i);        }    }    @Override    public void updateUi(DBAdapter nusu_ojo) {        db = new DBAdapter(c_);        db = nusu_ojo;    }}